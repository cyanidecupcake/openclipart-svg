<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created by David Eccles (gringer) <upvotes@gringene.org> -->

<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   viewBox="-5 -5 410 410"
   preserveAspectRatio="xMidYMid"
   width="100%"
   height="100%"
   id="svg3002"
   version="1.1"
   onload="startup(evt)">
  <script>
    <![CDATA[
             var svgDocument=null;
             var TDM,TY,H,M,DM,Y,ASG;
             var lMA = -1;
             var numCopies = 12;
             var updateTimeMillis = 100;
             var shapeArray = new Array(numCopies);
             var sInHD = 60*60*12;
             var SVGns = "http://www.w3.org/2000/svg";
             var SVGxmlns = 'http://www.w3.org/2000/xmlns/';
             var SVGxlink = 'http://www.w3.org/1999/xlink';
             function pad2(number) {
               var str = "" + ~~number;
               while(str.length < 2){
                 str = "0" + str;
               }
               return(str);
             }
             function hsvToRgb(h,s,v) {
               var rgb, i, data = [];
               if (s === 0) {
                 rgb = [v,v,v];
               } else {
                 h = h / 60;
                 i = Math.floor(h);
                 data = [v*(1-s), v*(1-s*(h-i)), v*(1-s*(1-(h-i)))];
                 switch(i) {
                   case 0:
                     rgb = [v, data[2], data[0]]; break;
                   case 1:
                     rgb = [data[1], v, data[0]]; break;
                   case 2:
                     rgb = [data[0], v, data[2]]; break;
                   case 3:
                     rgb = [data[0], data[1], v]; break;
                   case 4:
                     rgb = [data[2], data[0], v]; break;
                   default:
                     rgb = [v, data[0], data[1]]; break;
                 }
               }
               return '#' + rgb.map(function(x){
                 return ("0" + Math.round(x*255).toString(16)).slice(-2);
               }).join('');
             }
             function startup(evt){
               svgDocument=evt.target.ownerDocument;
               var thumb = svgDocument.getElementById("gThumbnail");
               thumb.parentNode.removeChild(thumb);
               TY = svgDocument.getElementById("tTimeY");
               TDM = svgDocument.getElementById("tTimeDM");
               Y = svgDocument.getElementById("gDateY");
               DM = svgDocument.getElementById("gDateDM");
               H = svgDocument.getElementById("gHandH");
               M = svgDocument.getElementById("gHandM");
               for(i = 1; i <= numCopies; i++){
                 ASG = svgDocument.getElementById("gAllShapes");
                 var shapeGroup = svgDocument.createElementNS(SVGns,"g");
                 var shape = svgDocument.createElementNS(SVGns,"use");
                 shape.setAttribute("fill",
                   hsvToRgb(((12-i) * 360) / 12, 1, 1));
                 shape.setAttribute("x", 200);
                 shape.setAttribute("y", 200);
                 shape.setAttributeNS(SVGxlink, "href","#gTemplate");
                 shapeGroup.appendChild(shape);
                 ASG.appendChild(shapeGroup);
                 shapeArray[i-1] = shapeGroup;
               }
               window.setInterval("changeTime()",updateTimeMillis);
               changeTime();
             }
             function changeTime(){
               var currentDate = new Date();
               var dateSeconds = (currentDate.getTime() / 1000) % (sInHD);
               var secInt = ~~dateSeconds;
               var secFrac =
                  (1 - Math.sin((0.5 - (dateSeconds - secInt)) * Math.PI))/2;
               <!-- var secFrac = (dateSeconds - secInt); -->
               var hAng = ((dateSeconds / sInHD) * 360);
               var mAng = (~~((dateSeconds % 3600) / 60) * 6);
               var sAng = (((secInt + secFrac) % 60) / 60) * 360;
               if(lMA != mAng){
                 Y.setAttribute("transform", "rotate(" +
                   (hAng + 270) + " 200 200)");
                 DM.setAttribute("transform", "rotate(" +
                   (mAng + 270) + " 200 200)");
                 lMA = mAng;
               }
               H.setAttribute("transform", "rotate(" + (hAng + 180) + " 0 0)");
               M.setAttribute("transform", "rotate("+(mAng + 270)+" 0 0)");
               TY.firstChild.nodeValue = currentDate.getFullYear();
               TDM.firstChild.nodeValue = pad2(currentDate.getMonth()+1) + "-" +
                 pad2(currentDate.getDate());
               for(i = 1; i <= numCopies; i++){
                 shapeGroup = shapeArray[i-1];
                 moveX = Math.cos(sAng * i * (Math.PI/180)) * 150;
                 moveY = Math.sin(sAng * i * (Math.PI/180)) * 150;
                 shapeGroup.setAttribute("transform",
                   "translate("+moveX+" "+moveY+")");
               }
             }
             //]]>
  </script>
  <defs>
    <g id="gTemplate">
      <circle cx="0" cy="0" r="25" stroke="black" fill-opacity="0.5"/>
      <g id="gHandM">
        <line x1="0" y1="0" x2="20" y2="0" stroke="black" stroke-width="2"
              stroke-linecap="round" />
      </g>
      <g id="gHandH">
        <line x1="0" y1="0" x2="0" y2="10" stroke="black" stroke-width="4"
              stroke-linecap="round" />
      </g>
      <circle cx="0" cy="0" r="3" fill="white" stroke="black"
              stroke-width="0.5" />
    </g>
  </defs>
  <g id="gDateY" transform="rotate(90 200 200)">
    <text id="tTimeY" x="200" y="206" text-anchor="left"
          font-size="15">2014</text>
  </g>
  <g id="gDateDM">
    <text id="tTimeDM" x="250" y="206" text-anchor="left"
          font-size="15">06-20</text>
  </g>
  <g id="gAllShapes"></g>
  <g id="gThumbnail">
    <g transform="translate(3 150)">
      <use x="200" y="200" xlink:href="#gTemplate" fill="#FF0080"/>
    </g>
    <g transform="translate(-150 5)">
      <use x="200" y="200" xlink:href="#gTemplate" fill="#FF00FF"/>
    </g>
    <g transform="translate(-8 -150)">
      <use x="200" y="200" xlink:href="#gTemplate" fill="#8000FF"/>
    </g>
    <g transform="translate(150 -10)">
      <use x="200" y="200" xlink:href="#gTemplate" fill="#0000FF"/>
    </g>
    <g transform="translate(13 149)">
      <use x="200" y="200" xlink:href="#gTemplate" fill="#0080FF"/>
    </g>
    <g transform="translate(-149 16)">
      <use x="200" y="200" xlink:href="#gTemplate" fill="#00FFFF"/>
    </g>
    <g transform="translate(-18 -149)">
      <use x="200" y="200" xlink:href="#gTemplate" fill="#00FF80"/>
    </g>
    <g transform="translate(149 -21)">
      <use x="200" y="200" xlink:href="#gTemplate" fill="#00FF00"/>
    </g>
    <g transform="translate(23 148)">
      <use x="200" y="200" xlink:href="#gTemplate" fill="#80FF00"/>
    </g>
    <g transform="translate(-148 26)">
      <use x="200" y="200" xlink:href="#gTemplate" fill="#FFFF00"/>
    </g>
    <g transform="translate(-29 -147)">
      <use x="200" y="200" xlink:href="#gTemplate" fill="#FF8000"/>
    </g>
    <g transform="translate(147 -31)">
      <use x="200" y="200" xlink:href="#gTemplate" fill="#FF0000"/>
    </g>
  </g>
</svg>
