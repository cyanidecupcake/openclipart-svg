<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created by David Eccles (gringer) <upvotes@gringene.org> -->
<svg xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns="http://www.w3.org/2000/svg" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:ns1="http://sozi.baierouge.fr" xmlns:cc="http://creativecommons.org/ns#" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:dc="http://purl.org/dc/elements/1.1/" id="svg3002" onload="startup(evt)" version="1.1" viewBox="-5 -5 410 410">
  <script>var svgDocument=null;
             var TY,H,M,Y,ASG;
             var lMA = -1;
             var numCopies = 12;
             var updateTimeMillis = 100;
             var shapeArray = new Array(numCopies);
             var sInHD = 60*60*12;
             var SVGns = "http://www.w3.org/2000/svg";
             var SVGxmlns = 'http://www.w3.org/2000/xmlns/';
             var SVGxlink = 'http://www.w3.org/1999/xlink';
             function pad2(number) {
               var str = "" + ~~number;
               while(str.length &lt; 2){
                 str = "0" + str;
               }
               return(str);
             }
             function hsvToRgb(h,s,v) {
               var rgb, i, data = [];
               if (s === 0) {
                 rgb = [v,v,v];
               } else {
                 h = h / 60;
                 i = Math.floor(h);
                 data = [v*(1-s), v*(1-s*(h-i)), v*(1-s*(1-(h-i)))];
                 switch(i) {
                   case 0:
                     rgb = [v, data[2], data[0]]; break;
                   case 1:
                     rgb = [data[1], v, data[0]]; break;
                   case 2:
                     rgb = [data[0], v, data[2]]; break;
                   case 3:
                     rgb = [data[0], data[1], v]; break;
                   case 4:
                     rgb = [data[2], data[0], v]; break;
                   default:
                     rgb = [v, data[0], data[1]]; break;
                 }
               }
               return '#' + rgb.map(function(x){
                 return ("0" + Math.round(x*255).toString(16)).slice(-2);
               }).join('');
             }
             function getAngleColour(theta){
                 // top: red, right: yellow, bottom: [dark] green, left: blue
                 theta = theta % 360;
                 var h,s,v;
                 s = 1; v = 1;
                 if        ((theta &gt;=   0) &amp;&amp; (theta &lt;  90)) {
                   h = (theta * (60 / 90));
                 } else if ((theta &gt;=  90) &amp;&amp; (theta &lt; 180)) {
                   h = ((theta - 90) * (60 / 90)) + 60;
                   v = 1 - ((theta - 90) / 180);
                 } else if ((theta &gt;= 180) &amp;&amp; (theta &lt; 270)) {
                   h = ((theta - 180) * (120 / 90)) + 120;
                   v = ((theta - 180) / 180) + 0.5;
                 } else if ((theta &gt;= 270) &amp;&amp; (theta &lt; 360)) {
                   h = ((theta - 270) * (120 / 90)) + 240;
                 }
                 return hsvToRgb(h,s,v);
             }
             function startup(evt){
               svgDocument=evt.target.ownerDocument;
               var thumb = svgDocument.getElementById("gThumbnail");
               thumb.parentNode.removeChild(thumb);
               TY = svgDocument.getElementById("tTimeY");
               Y = svgDocument.getElementById("gDateY");
               H = svgDocument.getElementById("gHandH");
               M = svgDocument.getElementById("gHandM");
               for(i = 1; i &lt;= numCopies; i++){
                 ASG = svgDocument.getElementById("gAllShapes");
                 var shapeGroup = svgDocument.createElementNS(SVGns,"g");
                 var shape = svgDocument.createElementNS(SVGns,"use");
                 shape.setAttribute("x", 200);
                 shape.setAttribute("y", 200);
                 shape.setAttributeNS(SVGxlink, "href","#gTemplate");
                 shapeGroup.appendChild(shape);
                 ASG.appendChild(shapeGroup);
                 shapeArray[i-1] = shapeGroup;
               }
               window.setInterval("changeTime()",updateTimeMillis);
               changeTime();
             }
             function changeTime(){
               var currentDate = new Date();
               var dateSeconds = (currentDate.getTime() / 1000) % (sInHD);
			   var dateHours = currentDate.getHours();
			   var dateMins = currentDate.getMinutes();
               var secInt = ~~dateSeconds;
               var secFrac =
                  (1 - Math.sin((0.5 - (dateSeconds - secInt)) * Math.PI))/2;
               &lt;!-- var secFrac = (dateSeconds - secInt); --&gt;
               var hAng = ((((dateHours % 12) + (dateMins/60)) / 12) * 360);
               var mAng = (((dateMins + ((secInt%60)/60)) / 60) * 360);
               var sAng = (((secInt + secFrac) % 60) / 60) * 360;
               if(lMA != mAng){
                 Y.setAttribute("transform", "rotate(" +
                   (hAng + 270) + " 200 200)");
                 lMA = mAng;
                 for(i = 0; i &lt; numCopies; i++){
                   shapeGroup = shapeArray[i];
                   shapeGroup.setAttribute("fill",
                     getAngleColour(mAng));
                 }
               }
               H.setAttribute("transform", "rotate(" + (hAng + 180) + " 0 0)");
               M.setAttribute("transform", "rotate("+(mAng + 270)+" 0 0)");
               TY.firstChild.nodeValue = currentDate.getFullYear() + "-" +
                 pad2(currentDate.getMonth()+1) + "-" +
                 pad2(currentDate.getDate());
               for(i = 1; i &lt;= numCopies; i++){
                 shapeGroup = shapeArray[i-1];
                 moveX = Math.cos(sAng * i * (Math.PI/180)) * 150;
                 moveY = Math.sin(sAng * i * (Math.PI/180)) * 150;
                 shapeGroup.setAttribute("transform",
                   "translate("+moveX+" "+moveY+")");
               }
             }
             //</script>
  <defs>
    <g id="gTemplate">
      <circle cy="0" cx="0" r="25" stroke="black" fill-opacity=".5"/>
      <g id="gHandM">
        <line stroke-width="2" x2="20" stroke="black" stroke-linecap="round"/>
      </g>
      <g id="gHandH">
        <line stroke-width="4" y2="10" x2="0" stroke="black" stroke-linecap="round"/>
      </g>
      <circle r="3" stroke="black" cy="0" cx="0" stroke-width=".5" fill="white"/>
    </g>
  </defs>
  <g id="gAllShapes"></g>
  <g id="gThumbnail"><use x="200" y="200" xlink:href="#gTemplate" /></g>
  <g id="gDateY" transform="rotate(90 200 200)">
    <text id="tTimeY" y="206" x="200" font-size="15" text-anchor="left">2014-06-20</text>
  </g>
 </svg>